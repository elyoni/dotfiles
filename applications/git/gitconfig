[user]
    email = elyoni@gmail.com
    name = Yehonatan Elentok
[includeIf "gitdir:~/projects/"]
    path =  ~/.work_dotfiles/git/gitconfig_user
[pull]
    rebase = true
    default = current
[push]
    default = current
[alias]
    co = checkout
    br = branch
    c = commit
    ci = c
    ca = commit --amend
    can = commit --amend --no-edit
    st = status
    visual = !gitg
    fa = fetch --all
    fb = "!f() { git fetch $(git remote | head -n 1) $1; }; f"  # Fetch branch
    lg = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit
    delete = "!f() { \
      echo \"Deleting branch '$1'...\"; \
      branch=\"$1\"; \
      git fetch --prune origin >/dev/null 2>&1; \
      if git show-ref --quiet --verify \"refs/remotes/origin/$branch\"; then \
        git push --delete origin \"$branch\" >/dev/null 2>&1 && echo \"Remote branch '$branch' deleted successfully.\" || echo \"Failed to delete remote branch '$branch'.\"; \
      else \
        echo \"Remote branch '$branch' does not exist.\"; \
      fi; \
      if git show-ref --quiet --verify \"refs/heads/$branch\"; then \
        if git branch -d \"$branch\" >/dev/null 2>&1; then \
          echo \"Local branch $branch deleted successfully.\"; \
        else \
          printf '\\033[5m\\033[31mLocal branch %s is not fully merged.\\033[0m\\n' "$branch"; \
          printf '\\033[33mDo you want to force-delete the branch %s? [y/N]\\033[0m\\n' "$branch"; \
          read -p \"\" confirm; \
          if [ \"$confirm\" = \"y\" ] || [ \"$confirm\" = \"Y\" ]; then \
            git branch -D \"$branch\" >/dev/null 2>&1 && echo \"Local branch '$branch' force-deleted successfully.\" || echo \"Failed to force-delete local branch '$branch'.\"; \
          else \
            echo \"Local branch '$branch' was not deleted.\"; \
          fi; \
        fi; \
      else \
        echo \"Local branch '$branch' does not exist.\"; \
      fi; \
      git fetch --prune origin >/dev/null 2>&1; \
    }; f"
    mustdelete = !"f() { git fetch --prune origin; git push --delete origin \"$1\"; git branch -D \"$1\" ; }; f"
    ph = push
    cpb = !"f() { git branch | grep -e '^*' |  sed 's/^* //' | tr -d '\n' | xclip -sel clip ; }; f"
    copybranch = cpb
    cps = !"f() { git rev-parse --short HEAD | tr -d '\n' | xclip -sel clip ; }; f"
    copysha = cps
    cpr = !"f() { git remote -v | awk '{print $2}' | head -1 | xclip -sel clip ; }; f"
    copyremote = cpr
    phf = push -f
    pl = pull
    dt = difftool --dir-diff
    dtv = difftool -v vimdiff
    cnv = !"version=$(cat version); git commit --include version --message \"[Version] $version\""
    root = rev-parse --show-toplevel
	site = "!f() { \\\n  UPDATE=0; FILE_LINE=\"\"; FILE=\"\"; LINE=\"\"; \\\n  while [ $# -gt 0 ]; do \\\n    case \"$1\" in \\\n      --update) UPDATE=1 ;; \\\n      --file) shift; FILE_LINE=\"$1\" ;; \\\n    esac; shift; \\\n  done; \\\n  [ $UPDATE -eq 1 ] && git fetch --prune origin >/dev/null 2>&1; \\\n  current_branch=$(git symbolic-ref --quiet --short HEAD 2>/dev/null || echo master); \\\n  if ! git show-ref --quiet \"refs/remotes/origin/$current_branch\"; then \\\n    current_branch=master; \\\n  fi; \\\n  if echo \"$FILE_LINE\" | grep -q \":\"; then \\\n    FILE=\"${FILE_LINE%:*}\"; \\\n    LINE=\"${FILE_LINE##*:}\"; \\\n    if echo \"$LINE\" | grep -q \":\"; then \\\n      start=\"${LINE%:*}\"; \\\n      end=\"${LINE#*:}\"; \\\n      line_anchor=\"#L${start}-L${end}\"; \\\n    else \\\n      line_anchor=\"#L$LINE\"; \\\n    fi; \\\n  else \\\n    FILE=\"$FILE_LINE\"; \\\n    line_anchor=\"\"; \\\n  fi; \\\n  repo_root=$(git rev-parse --show-toplevel); \\\n  if [ -n \"$FILE\" ]; then \\\n    rel_path=$(realpath --relative-to=\"$repo_root\" \"$FILE\"); \\\n    file_part=\"/$rel_path\"; \\\n  else \\\n    file_part=\"\"; \\\n  fi; \\\n  remote_url=$(git config --get remote.origin.url); \\\n  host_path=$(echo \"$remote_url\" | \\\n    sed -E \"s#^(ssh://)?git@([^:/]+)(:[0-9]+)?[:/]([^/]+/.+)\\.git\\$#https://\\2/\\4#\"); \\\n  url=\"${host_path}/blob/${current_branch}${file_part}${line_anchor}\"; \\\n  if [ -n \"$SSH_CONNECTION\" ]; then \\\n    echo \"You are on a remote device. The project URL is: $url\"; \\\n    command -v xclip >/dev/null && echo \"$url\" | xclip -selection clipboard && echo \"   URL copied to clipboard.\"; \\\n  else \\\n    command -v xdg-open >/dev/null && xdg-open \"$url\" >/dev/null 2>&1 || echo \"Failed to open browser. The project URL is: $url\"; \\\n  fi; \\\n}; f"
[diff]
    tool = meld
    merge = meld
[merge]
    tool = meld
[rerere]
	enabled = true
[icdiff]
    options = --highlight --line-numbers
[mergetool "nvimdiff"]
    cmd = "nvim -d \"$LOCAL\" \"$REMOTE\""
[difftool "nvimdiff"]
    cmd = "nvim -d \"$LOCAL\" \"$REMOTE\""
[include]
    path =  ~/.work_dotfiles/git/gitconfig_alias
[submodule]
    recurse = true
[credential]
	helper = store
[branch]
	sort = -committerdate
